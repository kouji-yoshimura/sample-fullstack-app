/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CreateThreadResult: { // root type
    message?: string | null; // String
    success?: boolean | null; // Boolean
    threadId?: string | null; // String
  }
  Mutation: {};
  Post: { // root type
    body?: string | null; // String
    createdAt?: string | null; // String
    createdBy?: string | null; // String
    id?: string | null; // ID
    threadId?: string | null; // String
    updatedAt?: string | null; // String
    updatedBy?: string | null; // String
  }
  PostResult: { // root type
    message?: string | null; // String
    postId?: string | null; // String
    success?: boolean | null; // Boolean
  }
  Query: {};
  Thread: { // root type
    createdAt?: string | null; // String
    createdBy?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
    postCount?: string | null; // String
    updatedAt?: string | null; // String
    updatedBy?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  CreateThreadResult: { // field return type
    message: string | null; // String
    success: boolean | null; // Boolean
    threadId: string | null; // String
  }
  Mutation: { // field return type
    createThread: NexusGenRootTypes['CreateThreadResult'] | null; // CreateThreadResult
    post: NexusGenRootTypes['PostResult'] | null; // PostResult
  }
  Post: { // field return type
    body: string | null; // String
    createdAt: string | null; // String
    createdBy: string | null; // String
    id: string | null; // ID
    threadId: string | null; // String
    updatedAt: string | null; // String
    updatedBy: string | null; // String
  }
  PostResult: { // field return type
    message: string | null; // String
    postId: string | null; // String
    success: boolean | null; // Boolean
  }
  Query: { // field return type
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    threads: Array<NexusGenRootTypes['Thread'] | null> | null; // [Thread]
  }
  Thread: { // field return type
    createdAt: string | null; // String
    createdBy: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    postCount: string | null; // String
    updatedAt: string | null; // String
    updatedBy: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  CreateThreadResult: { // field return type name
    message: 'String'
    success: 'Boolean'
    threadId: 'String'
  }
  Mutation: { // field return type name
    createThread: 'CreateThreadResult'
    post: 'PostResult'
  }
  Post: { // field return type name
    body: 'String'
    createdAt: 'String'
    createdBy: 'String'
    id: 'ID'
    threadId: 'String'
    updatedAt: 'String'
    updatedBy: 'String'
  }
  PostResult: { // field return type name
    message: 'String'
    postId: 'String'
    success: 'Boolean'
  }
  Query: { // field return type name
    posts: 'Post'
    threads: 'Thread'
  }
  Thread: { // field return type name
    createdAt: 'String'
    createdBy: 'String'
    id: 'ID'
    name: 'String'
    postCount: 'String'
    updatedAt: 'String'
    updatedBy: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    posts: { // args
      threadId?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}